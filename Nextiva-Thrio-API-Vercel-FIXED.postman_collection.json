{
  "info": {
    "name": "Nextiva-Thrio-API-Vercel-FIXED",
    "description": "Fixed Postman Collection - Matches Actual API Response Structure",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "‚úÖ Demo Credentials (Working)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"demo@thrio.com\",\n  \"password\": \"demo123\"\n}"
        },
        "url": {
          "raw": "https://nextivaapp.vercel.app/api/auth/validate",
          "protocol": "https",
          "host": ["nextivaapp", "vercel", "app"],
          "path": ["api", "auth", "validate"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\",
              "    pm.response.to.have.status(200);\",
              "});\",
              "\",
              "pm.test(\"Response has authentication mode indicators\", function () {\",
              "    const jsonData = pm.response.json();\",
              "    pm.expect(jsonData).to.have.property('authMode');\",
              "    pm.expect(jsonData).to.have.property('isDemo');\",
              "    pm.expect(jsonData.authMode).to.equal('demo_hardcoded');\",
              "    pm.expect(jsonData.isDemo).to.equal(true);\",
              "});\",
              "\",
              "pm.test(\"Demo token is generated\", function () {\",
              "    const jsonData = pm.response.json();\",
              "    pm.expect(jsonData.user).to.have.property('thrioToken');\",
              "    pm.expect(jsonData.user.thrioToken).to.include('demo-access-token');\",
              "});\",
              "\",
              "// Save token for further testing\",\",
              "const response = pm.response.json();\",
              "pm.environment.set('demo_token', response.user.thrioToken);\",
              "pm.environment.set('auth_mode', response.authMode);\",
              "\",
              "console.log('‚úÖ Demo authentication successful!');\",
              "console.log('Auth Mode:', response.authMode);\",
              "console.log('Is Demo:', response.isDemo);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "üîë Alternative Demo Credentials",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"nextiva+wisechoiceremodeling@wisechoiceremodel.com\",\n  \"password\": \"GHLwiseChoiceAPI2025!!\"\n}"
        },
        "url": {
          "raw": "https://nextivaapp.vercel.app/api/auth/validate",
          "protocol": "https",
          "host": ["nextivaapp", "vercel", "app"],
          "path": ["api", "auth", "validate"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\",
              "    pm.response.to.have.status(200);\",
              "});\",
              "\",
              "pm.test(\"Alternative demo credentials work\", function () {\",
              "    const jsonData = pm.response.json();\",
              "    pm.expect(jsonData.authMode).to.equal('demo_hardcoded');\",
              "    pm.expect(jsonData.isDemo).to.equal(true);\",
              "});\",
              "\",
              "console.log('‚úÖ Alternative demo authentication successful!');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "üåü Real Credentials Test (Environment Variables)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{real_username}}\",\n  \"password\": \"{{real_password}}\"\n}"
        },
        "url": {
          "raw": "https://nextivaapp.vercel.app/api/auth/validate",
          "protocol": "https",
          "host": ["nextivaapp", "vercel", "app"],
          "path": ["api", "auth", "validate"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\",
              "    pm.response.to.have.status(200);\",
              "});\",
              "\",
              "pm.test(\"Real authentication indicators\", function () {\",
              "    const jsonData = pm.response.json();\",
              "    pm.expect(jsonData).to.have.property('authMode');\",
              "    pm.expect(jsonData.authMode).to.equal('real_api');\",
              "    pm.expect(jsonData.isDemo).to.equal(false);\",
              "});\",
              "\",
              "// Save real token if successful\",\",
              "const response = pm.response.json();\",
              "if (response.authMode === 'real_api') {\",
              "    pm.environment.set('real_token', response.user.thrioToken);\",
              "    console.log('‚úÖ Real API authentication successful!');\",
              "} else {\",
              "    console.log('‚ÑπÔ∏è  Real auth failed, fallback mode:', response.authMode);\",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "üîç Test Token Usage (Health Check)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{demo_token}}"
          }
        ],
        "url": {
          "raw": "https://nextivaapp.vercel.app/api/health",
          "protocol": "https",
          "host": ["nextivaapp", "vercel", "app"],
          "path": ["api", "health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Health check with demo token\", function () {\",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\",
              "});\",
              "\",
              "console.log('Testing demo token usage...');\",
              "console.log('Auth Mode:', pm.environment.get('auth_mode'));\",
              "console.log('Token Type: Demo');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "‚ö° Quick Health Check (No Auth)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://nextivaapp.vercel.app/api/health",
          "protocol": "https",
          "host": ["nextivaapp", "vercel", "app"],
          "path": ["api", "health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Vercel deployment is healthy\", function () {\",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\",
              "});\",
              "\",
              "console.log('‚úÖ Vercel endpoint is accessible');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('üöÄ Testing Nextiva Smart Authentication on Vercel');",
          "console.log('Endpoint: https://nextivaapp.vercel.app');",
          "console.log('');",
          "console.log('üí° TIP: Start with \"‚úÖ Demo Credentials (Working)\" first!');",
          "console.log('   It uses the proven working credentials: demo@thrio.com / demo123');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://nextivaapp.vercel.app",
      "type": "string"
    },
    {
      "key": "real_username",
      "value": "your_real_username",
      "type": "string"
    },
    {
      "key": "real_password",
      "value": "your_real_password",
      "type": "string"
    }
  ]
}